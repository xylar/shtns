SHTns is a library for Spherical Harmonic Transform written in C, aimed at
numerical simulation (fluid flows, mhd, ...) in spherical geometries.

Copyright (c) 2010-2012 Centre National de la Recherche Scientifique.
written by Nathanael Schaeffer (CNRS, ISTerre, Grenoble, France).
SHTns is distributed under the open source CeCILL License (GPL compatible)
located in the LICENSE file.

FEATURES:

	- both scalar and vector transforms
	- backward and forward (synthesis and analysis) functions
	- flexible truncation (degree, order, azimuthal periodicity)
	- spatial data can be stored in latitude-major or longitude-major order arrays.
	- various conventions (normalization and Condon-Shortley phase)
	- can be used from Fortran, c/c++, and Python programs
	- a highly efficient Gauss algorithm working with Gauss nodes (based on Gauss-Legendre quadrature)
	- support for SSE2, SSE3 and AVX vectorization with gcc.
	- parallel transforms with OpenMP (for Gauss grid only).
	- an algorithm using DCT for regular nodes (based on a generalized Fejer quadrature)
	- synthesis (inverse transform) at any coordinate (not constrained to a grid) useful for rendering purposes.
	- ability to choose the optimal spatial sizes for a given spherical harmonic truncation.
	- on-the-fly transforms : saving memory and bandwidth, and can even be faster depending on architecture.
	- accurate up to spherical harmonic degree l=8000 (at least).
	- rotation functions to rotate spherical harmonics (beta).


DOCUMENTATION:

	- On-line doc is available: http://users.isterre.fr/nschaeff/SHTns/
	- You can build it locally: Run "make docs" to generate documentation with doxygen.
	  Then browse the html documentation starting with doc/html/index.html
	- A related research paper can be found on arXiv: http://arxiv.org/abs/1202.6522
	  If you use SHTns for research work, please cite this paper.


CHANGE LOG:

  tip:
	- slightly faster parallel transforms
	- Python interface has now decent error handling.
	- Python grid defaults to SHT_PHI_CONTIGUOUS instead of SHT_THETA_CONTIGUOUS.

  v2.2  (23 Apr 2012)
	- parallel transforms with OpenMP (for Gauss grid, significant benefit for l>=127).

  v2.1  (8 Mar 2012)
	- support for huge spherical harmonic degree (tested up to l>43600).
	- speed improvements, especially for large transforms.
	- compilation with FFTW v3.0 or more is now possible through a configuration option (see sht_config.h)

  v2.0  (9 Feb 2012)
	- support for AVX instruction set (almost x2 speed-up on Sandy-Bridge processors).
	- allow multiple transforms with different sizes, normalizations and grids (C interface only).
	- changes to C interface : most functions now require a handle to identify the transform. (Fortran interface unchanged)
	- transforms are accurate up to spherical harmonic degree l=2700 (at least).
	- lots of small improvements, speed-ups and a few bug fixes.
	- requires FFTW v3.3.
	- better Python interface using NumPy arrays (beta).
	- rotation functions to rotate spherical harmonics (beta).

  v1.5  (4 May 2011)
	- on-the-fly transforms which do not require huge matrices : save memory and bandwidth,
	  and can be faster on some architecture.
	- runtime selection of fastest algorithm, including on-the-fly transforms.
	- transforms are accurate up to spherical harmonic degree l=2045 (at least).
	- fix a bug that lead to wrong results for SHtor_to_spat() and SHsph_to_spat().
	- a bunch of minor improvements, optimizations and fixes.

  v1.0  (9 June 2010)
	- initial release for C/C++ and Fortran under CeCILL licence (GPL compatible).
	- scalar and vector, forward and backward transforms.
	- support several normalization conventions.
	- transforms are accurate up to spherical harmonic degree l=1300 (at least).
	- flexible truncation and spatial sizes.
	- support spatial data stored in latitude-major or longitude-major arrays.
	- regular grid (with DCT acceleration) or Gauss grid (highly optimized).
	- SSE2 vectorization.
	- synthesis at any coordinate (not constrained to grid).
	- can choose the optimal spatial size for a given spherical harmonic truncation.
	- requires FFTW 3.0.
