*** KNOWN BUGS ***
- We rely on fftw to allocate aligned memory. This only works if fftw has been compiled with sse2 support !!
  => we should therefore use our own aligned memory allocation ... (or use autoconf ?)

*** TODO ***
- make equal_polar_grid invertible ???
- complex fft is much faster, resulting in 15-20% faster SHT for mmax=lmax. => switch to complex for nlat even, (at the expense of some accuracy) !!
- split the fft and the legendre transform so that they can be done independantly ?
   -OR- allow to deactivate fft.
- Using OpenCL may be interesting !

- m=0 :
	* nphi=1 : no fft // stride = 1
	* nphi>1 : fft should be replaced by phi-averaging => then call (nphi=1) version. [handles stride problem]

- split m=0 and m>0 ?? [allow faster operation with on-the-fly at different NWAY]

*** OPTIMIZATIONS ***

for m=0, z[k] is zero up to l-1
         dtz[k] is zero up to l-2
for m=1, z[k] is zero up to l-2
         dtz[k] is constant up to l-1
for m=2, z[k] is constant up to l-1
         dtz[k] is constant up to l-2
for m=3, z[k] is constant up to l-2

- there may be a need for a merged (3 components) DCT version [done for m=0]
- *** there is a need for transposed version !! *** (why ??)
- Optimize m=0 and NPHI=1 (don't need to go to "complex" representation)

*** NOTES ****

+ cache optimization have been performed for m=0 and are quite impressive at high LMAX.
+ cache optimizations associated with polar optimization for m>0.
+ vector instructions (sse2 or sse3) are used, 5 to 15% speedup with gcc.
+ tested transposed version of gauss algorithm. It does not perform much better (speedup <2% for "time_SHT -transpose")
+ the combined 3-component transforms are up to 25% faster than sacalar+vector with SSE.

+ LM_LOOP : translating an integer to a double is SLOW. So if l or l(l+1) is used in the computation, using an array is faster.
     furthermore, it seems that cache misses has less penalty than branch misses.
     LM loop with li[lm] array access seems faster... (at least for 4 arrays access).

- SHT e/o does not work in DCT space. (ok in Gauss version as of r72)

DCT SHT is ok for LMAX=1300 and NLAT_2=1024. changeset 70:f901295a7862
DCT tested up to LMAX=2045. changeset 218:d0d6a8e1e22b
DCT tested up to LMAX=2700. changeset 244:76e0128a9ef7 (with mres=135)

DCT is measured about 25% faster than GAUSS for xshells dj_ref case (axisym).

QGdynamo now successfully uses SHTns : the speedup is quite impressive x2.2 for a reasonable size.
